using SmartDocAI.Application.Interfaces;
using Azure;
using Azure.AI.OpenAI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;
using SmartDocAI.Infrastructure.Configuration;
using OpenAI.Chat;
using Microsoft.Extensions.Logging;

namespace SmartDocAI.Infrastructure.Services
{
    /// <summary>
    /// Service for interacting with Azure OpenAI 
    /// to generate summaries and respond to user prompts based on document text.
    /// </summary>
    public class DocumentAIService : IDocumentAIService
    {
        // private readonly OpenAIClient _openAI;
        private readonly AzureOpenAIClient _client;
        private readonly string _deployment;
        private ILogger<DocumentAIService> _logger;

        public DocumentAIService(IOptions<AzureOpenAIOptions> options, ILogger<DocumentAIService> logger)
        {
            Uri endPoint = new Uri(options.Value.EndPoint);
            AzureKeyCredential keyCredential = new AzureKeyCredential(options.Value.ApiKey);
            _client = new AzureOpenAIClient(endPoint, keyCredential);
            _deployment = options.Value.Deployment;
            _logger = logger;
        }

        public async Task<string> GenerateSummaryAsync(string extractedText)
        {
            //return await Task.FromResult("return value"); 
            var messages = new ChatMessage[]
            {
                new SystemChatMessage("You are a helpful assistant."),
                new UserChatMessage($"Summarize the following:\n{extractedText}")
            };

            var options = new ChatCompletionOptions() { Temperature = 0.7f, MaxOutputTokenCount = 100 };

            _logger.LogInformation("Calling Azure OpenAI service to generate summary for text");
            var result = await _client.GetChatClient(_deployment).CompleteChatAsync(messages,options);
            _logger.LogInformation("summary generated by Azure OpenAI service");
            return result.Value.Content[0].Text;

            //var chatRequest = new ChatRequest
            //{
            //    Model = "gpt-3.5-turbo", // or gpt-4
            //    Messages = new List<ChatMessage>
            //    {
            //        new ChatMessage(ChatMessageRole.System, "You are a helpful assistant."),
            //        new ChatMessage(ChatMessageRole.User, $"Summarize the following:\n{extractedText}")
            //    }
            //};

            //            var result = await _openAI.Chat.CreateChatCompletionAsync(chatRequest);

            //            return result.Choices[0].Message.Content;

            //var result = await _openAI.Chat.CreateChatCompletionAsync((new()
            //{
            //    Messages = new List<ChatMessage>
            //{
            //    ChatMessage.FromSystem("You are a helpful assistant."),
            //    ChatMessage.FromUser($"Summarize this document:\n{extractedText}")
            //}
            //});


            //var messages = new List<Message>
            //{
            //    Message.FromSystem("You are a helpful assistant."),
            //    ChatMessage.FromUser($"Summarize the following text:\n{extractedText}")
            //};

            //var request = new ChatRequest(
            //    model: "gpt-3.5-turbo",
            //    messages: messages,
            //    temperature: 0.7,
            //    maxTokens: 150
            //);

            //var result = await _openAI.ChatEndpoint.GetChatCompletionsAsync(request);
            //Console.WriteLine(result.FirstChoice.Message.Content);

            //return await Task.FromResult("This is a placeholder summary. Replace with actual OpenAI API call.");
            //        {
            //            Model = "gpt-3.5-turbo",
            //            Messages = new List<ChatMessage>
            //{
            //    ChatMessage.FromSystem("You are a helpful assistant."),
            //    ChatMessage.FromUser($"Summarize the following text:\n{extractedText}")
            //},
            //            MaxTokens = 150
            //        };


            // Fix: Use the ChatEndpoint to create a completion since OpenAIClient does not have a 'Completions' property.
            //var result = await _openAI.ChatEndpoint.GetCompletionAsync(
            //    new OpenAI.Chat.ChatRequest
            //    {
            //        Model = "gpt-3.5-turbo",
            //        Messages = new List<OpenAI.Chat.ChatMessage>
            //        {
            //                new OpenAI.Chat.ChatMessage
            //                {
            //                    Role = "system",
            //                    Content = "You are a helpful assistant."
            //                },
            //                new OpenAI.Chat.ChatMessage
            //                {
            //                    Role = "user",
            //                    Content = $"Summarize the following text:\n{extractedText}"
            //                }
            //        },
            //        MaxTokens = 150
            //    });

            //return result.Choices.FirstOrDefault()?.Message.Content ?? string.Empty;
        }

        public async Task<string> RespondToPromptAsync(string extractedText, string userPrompt)
        {
            //return await Task.FromResult("Respond tassk");
            var messages = new ChatMessage[]
            {
                new SystemChatMessage("You are a helpful assistant."),
                new UserChatMessage($"Based on the following document:\n{extractedText}\n\n{userPrompt}")
            };

            var options = new ChatCompletionOptions() { Temperature = 0.7f, MaxOutputTokenCount = 100 };

            _logger.LogInformation("Calling Azure OpenAI service to get response for Uesr prompt");
            var result = await _client.GetChatClient(_deployment).CompleteChatAsync(messages,options);
            _logger.LogInformation("response received from Azure OpenAI service for Uesr prompt");

            return result.Value.Content[0].Text;

            //var result = await _openAI.Chat.CreateChatCompletionAsync(new ChatRequest()
            //{
            //    Messages = new List<ChatMessage>
            //    {
            //        new ChatMessage(ChatMessageRole.System,"You are an intelligent document assistant."),
            //        new ChatMessage(ChatMessageRole.User,$"Document: {extractedText}\n\nUser Prompt: {userPrompt}")
            //    }
            //});

            //return result.Choices[0].Message.Content;
        }
    }
}
